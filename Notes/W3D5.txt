Multi-threading
    A thread is a tiny process within a program
    Parallel Programming
        Shares qual CPU time between all tiny processes in an application for speed
            ex. There are 20 fields that take 1 second each, so 20 seconds total
                If you split them between 5 threads, you drop to 4 seconds total
    By default all of a Java application is single-threaded
        ex. 'main' is an application thread created by Java
    Threads race to finish, so you can't be sure about the order they're completed in
        However, thread priority can be modified. But this doesn't guarantee ...
            a certain order since every OS manages threads differently.
Thread Lifecycle
    Create a thread
    The method start() puts the thread into a Runnable state
    It's put into Running state based on priority and until the thread's job is done
        start() calls run(). Here you write about what the thread does
    You can suspend or terminate a thread, but you can't restart it
    It can be put into a Non-Runnable state if it needs to wait for another thread
    Every thread has its own private Stack to maintain its information
Two Types of Threads
    Foreground
        All of these run before the background threads
        They have high priority
    Background
        They can be used to clean up resources
            Garbage Collector is a Background (Daemon) thread
        They have low priority
        setDaemon(true) makes a thread into a Background thread
        The application won't wait for Background threads to finish. Once ...
            Foreground threads are done, the JVM ends the program.
Write a Thread
    You can 'extends' java.lang.Thread class, or ...
        ex. Create class that extends Thread, containing what you want the thread ...
            to do, then, in main, create a new thread objext of that class and run it.
    You can 'implements' lava.lang.Runnable interface
        This is the preferred way
        It's a Functional Interface
All threads have unique id's generated by the JVM to be monitored by ThreadMonitors in Java
Thread Synchronization
    Resources are shared between threads. This can cause confusion
    Achieving synchronization helps to execute 1 thread at a time
    Thread Safe Class (Synchronized Class)
        Class where all methods are synchronized
        Mark the class with 'synchronized' keyword

Lambda
    Creates actions rather than methods/functions which perform actions
    They don't belong to any Class
    ex. variableName = ()->{block_of_code}